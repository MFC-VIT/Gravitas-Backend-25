generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QuestionCategory {
  id        String          @id @default(uuid())
  name      String
  questions Question[]
  attempts  AnswerAttempt[]   // opposite side of AnswerAttempt.category
}

model Question {
  id            String           @id @default(uuid())
  categoryId    String
  questionText  String
  options       Json
  correctOption String
  points        Int
  difficulty    Int              @default(1)

  category      QuestionCategory @relation(fields: [categoryId], references: [id])
  attempts      AnswerAttempt[]
}

model AnswerAttempt {
  id             String    @id @default(uuid())
  teamId         String
  lobbyId        String
  questionId     String
  selectedOption String?   @default("")
  isCorrect      Boolean?  @default(false)
  answeredAt     DateTime?
  categoryId     String?
  difficulty     String?

  question Question          @relation(fields: [questionId], references: [id])
  team     Team              @relation(fields: [teamId], references: [id])
  lobby    Lobby             @relation(fields: [lobbyId], references: [id])
  category QuestionCategory? @relation(fields: [categoryId], references: [id])
}

model Team {
  id         String       @id @default(uuid())
  name       String
  code       String       @unique
  leaderId   Int
  teamPoints Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  isReadyScotland Boolean @default(false)

  leader     User         @relation("TeamLeader", fields: [leaderId], references: [id])
  players    TeamPlayer[]
  attempts   AnswerAttempt[]
}

model TeamPlayer {
  id       String   @id @default(uuid())
  teamId   String
  userId   Int
  isAdmin  Boolean  @default(false)
  isLeader Boolean  @default(false)

  team     Team     @relation(fields: [teamId], references: [id])
  user     User     @relation("TeamMembership", fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model User {
  id           Int            @id @default(autoincrement())
  username     String
  email        String         @unique
  password     String
  role         String         @default("user")
  refreshToken RefreshToken[]
  teams        TeamPlayer[]   @relation("TeamMembership")
  ledTeams     Team[]         @relation("TeamLeader")
  moveHistory  MoveHistory[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Lobby {
  id             String         @id @default(uuid())
  isStarted      Boolean        @default(false)
  createdAt      DateTime       @default(now())

  gameState      GameState?
  moveHistory    MoveHistory[]
  answerAttempts AnswerAttempt[]
}

model GameState {
  id               String   @id @default(uuid())
  lobbyId          String   @unique   // âœ… ensures one-to-one with Lobby
  stateJSON        Json
  currentTurnUserId String
  lastUpdated      DateTime @default(now())

  lobby            Lobby    @relation(fields: [lobbyId], references: [id])
}

model MoveHistory {
  id          String   @id @default(uuid())
  userId      Int
  lobbyId     String
  moveJSON    Json
  roundNumber Int
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  lobby       Lobby    @relation(fields: [lobbyId], references: [id])
}

model GameBoard {
  id             String @id @default(uuid())
  nodeId         Int
  connectionsJSON Json
  transportTypes Json
}
